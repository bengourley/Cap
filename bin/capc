#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander'),
	fs = require('fs'),
	parser = require('../lib/parser.js'),
	indentHandler = require('../lib/indent-handler.js')();

program
	.version('0.0.1')
	.option(
		'-p, --print',
		'print the compiled js instead of outputting to file'
	)
	.option(
		'-t, --tree',
		'pretty print the nodes in the AST instead of compiling to file'
	)
	.option(
		'-g, --grammar [grammar]',
		'generate a parser on the fly with the given grammar file'
	)
	.parse(process.argv);

var compile = function (p, print) {

	fs.readFile(program.args[0], 'utf8', function (err, data) {
	
		try {
			
			var node = p.parse(data);

			(function walkNode(node) {
				console.log(indentHandler.getIndent() + node.print());
				indentHandler.nextIndent();
				node.childNodes.forEach(function (childNode) {
					walkNode(childNode);
				});
				indentHandler.prevIndent();
			}(node));

			//console.log(print ? AST.print() : AST.compile());
		} catch (e) {
			// Catch a parser error for non-ugly output
			if ('ParseError' === e.type) {
				console.log(e.message);
			} else {
				// But throw any other exception
				throw e;
			}
		}

	});
};

if (!program.args[0]) {
	console.log('No file supplied!');
} else {

	if (program.grammar) {
		fs.readFile(program.grammar, 'utf8', function (err, data) {
			var p = parser();
			compile(p, program.print);
		});
	} else {

		compile(parser(), program.print);

	}

}
